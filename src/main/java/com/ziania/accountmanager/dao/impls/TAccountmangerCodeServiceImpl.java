package com.ziania.accountmanager.dao.impls;

import com.ziania.accountmanager.dao.interfaces.ITAccountmangerCodeService;
import com.ziania.accountmanager.domain.TAccountmangerCode;
import com.ziania.accountmanager.exception.CommonException;
import com.ziania.accountmanager.service.BaseServiceImpl;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.commons.collections.MapUtils;
import org.springframework.stereotype.Repository;

@Repository("accountmangerCodeServiceImpl")
public class TAccountmangerCodeServiceImpl extends BaseServiceImpl implements ITAccountmangerCodeService {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_accountmanger_code
     *
     * @mbg.generated Tue May 14 11:00:16 CST 2019
     */
    public Map countByCond(Map params) throws CommonException {
        Map<String, Object> returnMap = new HashMap<>();
        if (MapUtils.isNotEmpty(params)) {
            params.put(TAccountmangerCode.TABLE_NAME, TAccountmangerCode.TABLE_NAME);
            int total = getBaseDao().queryCount("com.ziania.accountmanager.dao.TAccountmangerCodeMapper.countByCond", params);
            returnMap.put("total", total);
        } else {
            returnMap.put("total", 0);
        }
        return returnMap;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_accountmanger_code
     *
     * @mbg.generated Tue May 14 11:00:16 CST 2019
     */
    public Map selectByCond(Map params) throws CommonException {
        Map<String, Object> returnMap = new HashMap<>();
        params.put(TAccountmangerCode.TABLE_NAME, TAccountmangerCode.TABLE_NAME);
        Map<String, Object> countMap = this.countByCond(params);
        if (MapUtils.getInteger(countMap, "total") > 0) {
            List<Map<String, Object>> queryList = getBaseDao().selectByCond("com.ziania.accountmanager.dao.TAccountmangerCodeMapper.selectByCond", params);
            returnMap.put("total", MapUtils.getInteger(countMap, "total"));
            returnMap.put("beans", queryList);
        }
        return returnMap;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_accountmanger_code
     *
     * @mbg.generated Tue May 14 11:00:16 CST 2019
     */
    public Map selectByPrimaryKey(Map params) throws CommonException {
        Map<String, Object> returnMap = new HashMap<>();
        params.put(TAccountmangerCode.TABLE_NAME, TAccountmangerCode.TABLE_NAME);
        Map<String, Object> objectMap = (Map<String, Object>)getBaseDao().selectByPrimaryKey("com.ziania.accountmanager.dao.TAccountmangerCodeMapper.selectByPrimaryKey", params);
        returnMap.put("bean", objectMap);
        return returnMap;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_accountmanger_code
     *
     * @mbg.generated Tue May 14 11:00:16 CST 2019
     */
    public Map deleteByCond(Map params) throws CommonException {
        Map<String, Object> returnMap = new HashMap<>();
        params.put(TAccountmangerCode.TABLE_NAME, TAccountmangerCode.TABLE_NAME);
        int deleteCount = getBaseDao().deleteByCond("com.ziania.accountmanager.dao.TAccountmangerCodeMapper.deleteByCond", params);
        returnMap.put("deleteCount", deleteCount);
        return returnMap;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_accountmanger_code
     *
     * @mbg.generated Tue May 14 11:00:16 CST 2019
     */
    public Map deleteByPrimaryKey(Map params) throws CommonException {
        Map<String, Object> returnMap = new HashMap<>();
        params.put(TAccountmangerCode.TABLE_NAME, TAccountmangerCode.TABLE_NAME);
        int deleteCount = getBaseDao().deleteByPrimaryKey("com.ziania.accountmanager.dao.TAccountmangerCodeMapper.deleteByPrimaryKey", params);
        returnMap.put("deleteCount", deleteCount);
        return returnMap;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_accountmanger_code
     *
     * @mbg.generated Tue May 14 11:00:16 CST 2019
     */
    public Map updateByPrimaryKey(Map params) throws CommonException {
        Map<String, Object> returnMap = new HashMap<>();
        params.put(TAccountmangerCode.TABLE_NAME, TAccountmangerCode.TABLE_NAME);
        int updateCount = getBaseDao().updateByPrimaryKey("com.ziania.accountmanager.dao.TAccountmangerCodeMapper.updateByPrimaryKey", params);
        returnMap.put("updateCount", updateCount);
        return returnMap;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_accountmanger_code
     *
     * @mbg.generated Tue May 14 11:00:16 CST 2019
     */
    public Map insertSelective(Map params) throws CommonException {
        Map<String, Object> returnMap = new HashMap<>();
        params.put(TAccountmangerCode.TABLE_NAME, TAccountmangerCode.TABLE_NAME);
        int insertCount = getBaseDao().insertSelective("com.ziania.accountmanager.dao.TAccountmangerCodeMapper.insertSelective", params);
        returnMap.put("insertCount", insertCount);
        return returnMap;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_accountmanger_code
     *
     * @mbg.generated Tue May 14 11:00:16 CST 2019
     */
    public Map insertBatch(Map params) throws CommonException {
        Map<String, Object> returnMap = new HashMap<>();
        params.put(TAccountmangerCode.TABLE_NAME, TAccountmangerCode.TABLE_NAME);
        int insertCount = getBaseDao().insertSelective("com.ziania.accountmanager.dao.TAccountmangerCodeMapper.insertBatch", params);
        returnMap.put("insertCount", insertCount);
        return returnMap;
    }
}